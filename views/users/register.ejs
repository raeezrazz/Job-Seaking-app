<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Find Your Job - Register</title>
    <link rel="stylesheet" href="userAsset/css/style.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
</head>
<body>
    <header class="header">
    <img src="logo.png" alt="Logo">
    <h1><a href="/" style="color: white; text-decoration: none;">Find Your Job</a></h1>
</header>

    <div class="main-content">
        <div class="form-container">
            <h2>Register</h2>
            <form onsubmit="handleRegister(event)">
                <label for="name">Name</label>
                <input type="text" id="name" name="name" required>
                
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required>

                <label for="number">Phone</label>
                <input type="number" id="number" name="number" required>
                
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
                
                <input type="submit" value="Register">
                <a href="/login">Already have an account? Login</a>
            </form>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function handleRegister(event) {
            event.preventDefault();
            
            // Retrieve form values
            const name = document.getElementById('name').value.trim();
            const email = document.getElementById('email').value;
            const number = document.getElementById('number').value;
            const password = document.getElementById('password').value;

            const namePattern = /^[A-Za-z\s]+$/;
            if (!namePattern.test(name)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Name',
                    text: 'Name must not start with a space, contain numbers, or special characters.',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            // Validate phone number (assuming it should be 10 digits)
            const phonePattern = /^[0-9]{10}$/;
            if (!phonePattern.test(number)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Phone Number',
                    text: 'Phone number must be 10 digits.',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Validate password length (minimum 6 characters)
            if (password.length < 6) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Password',
                    text: 'Password must be at least 6 characters long.',
                    confirmButtonText: 'OK'
                });
                return;
            }
            const data={
                name: name,
                email:email,
                phone:number,
                password:password
            }
            // If validation passes
            // If validation passes
// If validation passes
fetch('/registerUser', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify(data)
})
.then(response => {
    if (!response.ok) {
        throw new Error(response.statusText);
    }
    return response.json();
})
.then(result => {
    if (result.success) {
        console.log("Registration successful");
    } else {
        Swal.fire('Error', 'Registration failed', 'error');
    }
})
.catch(error => {
    console.error('Registration error:', error);
    Swal.fire('Error', 'There was an error with registration', 'error');
});

Otp(); // Open the OTP prompt immediately

console.log("Registration request sent");

function Otp() {
    Swal.fire({
        title: 'Enter OTP',
        input: 'text',
        inputLabel: 'OTP',
        inputPlaceholder: 'Enter the OTP sent to your email',
        showCancelButton: true,
        confirmButtonText: 'Submit',
        preConfirm: (otp) => {
            console.log("OTP being submitted:", otp);
            // Send OTP to the server for verification
            return fetch('/verifyOtp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ otp })
            })
            .then(response => {
                console.log('OTP verification response:', response);
                if (!response.ok) {
                    throw new Error(response.statusText);
                }
                return response.json();
            })
            .then(result => {
                console.log('OTP verification result:', result);
                if (result.success) {
                    Swal.fire('Success', 'OTP verified successfully', 'success');
                } else {
                    Swal.fire('Error', 'Invalid OTP, please try again', 'error');
                    setTimeout(Otp, 3000); // Re-show the OTP prompt after 3 seconds if verification fails
                }
            })
            .catch(error => {
                console.error('OTP verification error:', error);
                Swal.fire('Error', 'Error verifying OTP, please try again', 'error');
                setTimeout(Otp, 3000); // Re-show the OTP prompt after 3 seconds if an error occurs
            });
        }
    });
}

        }
    </script>
</body>
</html>
